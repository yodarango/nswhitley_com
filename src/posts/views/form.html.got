{{define "extra_head"}}
    <link href="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.snow.css" rel="stylesheet" />
{{end}}

<form method="post" class="resource-update-form posts-form">

    <section class="actions">
        <input type="submit" class="button" value="Save">
        <a class="button grey" href="javascript:history.back()">Cancel</a>
    </section>
    <section class="inline-fields">
     {{ select "Status" "status" .post.Status .post.StatusOptions }}  
     {{ selectarray "Author" "author_id" .post.AuthorID .authors }}  
     {{ selectarray "Template" "template" .post.Template .post.TemplateOptions }} 
    </section>

    <section>
        <div id="dialogOverlay" class="dialogOverlay justify-content-center align-items-center">
            <dialog id="imageDialog">
                <div class="d-flex align-items-center justify-content-between mb-3 gap-2">
                    <h4>Select an Image</h4>
                    <button class="imageDialog-closeBtn bg-transparent m-0 p-0 fs-2 text-body" onclick="closeImagePicker()">
                        <i class="fa fa-close"></i></button>
                    </button>
                </div>
                <div class="gallery"></div>
            </dialog>
        </div>

        <input type="hidden" name="thumbnail" id="thumbnailInput">
    </section>

    <section class="wide-fields">
          {{ field "Name" "name" .post.Name }}
          {{ field "Summary" "summary" .post.Summary }}
          {{ field "Keywords" "keywords" .post.Keywords }}
          <div>
          {{ if .post.Thumbnail}}
            <img id="selectedThumbnail" onclick="openImagePicker()" src="/uploads{{.post.Thumbnail}}" alt="{{.post.Name}}" />
          {{else}}
            <img class="image-placeholder-thumbnail-overwrite d-none" id="selectedThumbnail" onclick="openImagePicker()" src="/uploads{{.post.Thumbnail}}" alt="{{.post.Name}}" />
            <div class="image-placeholder">
                <button type="button" class="button small" onclick="openImagePicker()">Select a Thumbnail</button>
             </div>
            {{end}}
          </div>
         
          
        <div id="editor">{{html .post.Text}}</div>

        <input type="hidden" name="text" id="quillContent">
    </section>
</form>


{{define "extra_footer"}}
    <script src="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.js"></script>

    <script>
        const toolbarOptions = [
        ['bold', 'italic', 'underline', 'strike'],      
        ['blockquote', 'code-block'],
        ['link', 'image', 'video', 'formula'],

        [{ 'header': 1 }, { 'header': 2 }],             
        [{ 'list': 'ordered'}, { 'list': 'bullet' }, { 'list': 'check' }],
        [{ 'script': 'sub'}, { 'script': 'super' }],     
        [{ 'indent': '-1'}, { 'indent': '+1' }],          
        [{ 'direction': 'rtl' }],                         

        [{ 'size': ['small', false, 'large', 'huge'] }],  
        [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

        [{ 'color': [] }, { 'background': [] }],         
        [{ 'font': [] }],
        [{ 'align': [] }],

        ['clean']                                       
        ];

        const quill = new Quill('#editor', {
        modules: {
            toolbar: toolbarOptions
        },
        theme: 'snow'
        });

        document.querySelector('.posts-form').addEventListener('submit', function(e) {

            const editorContent = document.querySelector("#editor .ql-editor");
            const editorContentText = `${editorContent.innerHTML}`

            document.getElementById('quillContent').value = editorContentText;
        });
    </script>


    <script>

        // select a post thumbnail
        // Variabile per tenere traccia se le immagini sono già state caricate
        let imagesLoaded = false;

        // Funzione per aprire il modal
        function openImagePicker() {
            const dialog = document.getElementById("imageDialog");

            dialog.showModal();
            document.getElementById("dialogOverlay").style.display = "flex";
            dialog.scrollTop = 0;
            }

            // Funzione per chiudere il modal
            function closeImagePicker() {
            document.getElementById("imageDialog").close();
            document.getElementById("dialogOverlay").style.display = "none";
            }

            // Funzione per caricare le immagini nel background
            async function loadImages() {
            if (imagesLoaded) return; // Evita di caricare più volte le immagini

            try {
                const response = await fetch("/api/images"); // Sostituisci con il tuo endpoint API
                const images = await response.json();

                const galleryDiv = document.querySelector(".gallery");
                galleryDiv.innerHTML = ""; // Pulisce la galleria prima di aggiungere le immagini

                images.forEach((image) => {
                const imgElement = document.createElement("img");
                imgElement.src = "/uploads/" + image.Path;
                imgElement.alt = image.Name;
                imgElement.style.width = "100px";
                imgElement.style.cursor = "pointer";

                // Quando l'utente clicca su un'immagine, aggiorna il thumbnail selezionato
                imgElement.addEventListener("click", function () {
                    const imageThumb = document.getElementById("selectedThumbnail")
                    const imageThumbPlaceholder = document.querySelector(".image-placeholder")

                    if (imageThumb){
                        imageThumb.src = imgElement.src;
                        imageThumb.classList.add("d-block")
                        imageThumb.classList.remove("d-none")
                    }

                    if (imageThumbPlaceholder){
                        imageThumbPlaceholder.classList.add("d-none")
                        imageThumbPlaceholder.classList.remove("d-block")
                    }
                    document.getElementById("thumbnailInput").value = "/" + image.Path;
                    closeImagePicker();
                });

                galleryDiv.appendChild(imgElement);
                });

                imagesLoaded = true; // Imposta il flag a true dopo il primo caricamento
            } catch (error) {
                console.error("Errore nel caricamento delle immagini:", error);
            }
        }
    </script>

{{end}}