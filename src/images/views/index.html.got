<section class="container mt-4">
    <h1 id="images-header-label" class="mb-4">Images ({{len .images}})</h1>


    <section class="d-flex align-items-center justify-content-start gap-3 tw-mb-4">
        <div class="w-100">
            <div class="d-flex w-100">
                <input type="search" id="imageSearch-images-page" class="form-control" placeholder="Search images..." oninput="filterImagesPage(this)">
            </div>
        </div>

        <!-- Form per l'upload -->
        <div class="flex-shrink-0">
            <form id="uploadForm" class="d-flex p-0">
                <input type="file" id="imageUpload" class="d-none me-2" >
                <button type="submit" class="btn btn-primary d-flex align-items-center justify-content-center gap-2 m-0">
                    <i class="fa fa-plus"></i>
                    <span>Upload new image</span>
                </button>
            </form>
        </div>
    </section>
    <div class="alert alert-info">Try giving your images a descriptive name when uploading them in order to facilitate the search</div>

    <div class="row" id="imagesContainer">
        <!-- Le immagini verranno aggiunte dinamicamente -->
    </div>

    <!-- Pulsante per caricare più immagini -->
    <div class="text-center mt-3">
        <button class="btn btn-secondary" id="loadMoreBtn" onclick="loadMoreImages()">Load more</button>
    </div>
</section>

<script>
let allImages = {{ .images }}; 
let imagesPerPage = 50;
let currentIndex = 0; 
let filteredImages = allImages; 

function loadMoreImages(reset = false) {
    let imagesContainer = document.getElementById("imagesContainer");

    if (reset) {
        imagesContainer.innerHTML = "";
        currentIndex = 0;
    }

    let endIndex = Math.min(currentIndex + imagesPerPage, filteredImages.length);
    let imagesToLoad = filteredImages.slice(currentIndex, endIndex);

    imagesToLoad.forEach((image) => {
        let imageCard = document.createElement("div");

        if (!imageCard) return 
        imageCard.className = "col-md-4 mb-4 image-card";
        imageCard.setAttribute("data-name", image.Name);
        imageCard.innerHTML = `
            <div class="card">
                <img src="/uploads/${image.Path}" class="card-img-top" alt="${image.Name}">
                <div class="card-body text-center">
                    <button type="button" class="btn btn-danger w-100" onclick="deleteImage(this, '${image.Path}')">Delete</button>
                </div>
            </div>
        `;
        imagesContainer.appendChild(imageCard);
    });

    currentIndex += imagesPerPage; 

    document.getElementById("loadMoreBtn").style.display = currentIndex >= filteredImages.length ? "none" : "block";
}

function filterImagesPage(e) {

    let searchQuery = e.value.toLowerCase();
    
    searchQuery = searchQuery.replace(/[-_ ]/g, "");

    filteredImages = allImages.filter(image => {
        let normalizedImageName = image.Name.toLowerCase().replace(/[-_ ]/g, ""); 
        return normalizedImageName.includes(searchQuery);
    });

    loadMoreImages(true);
}

async function deleteImage(button, imagePath) {
    if (!confirm("Are you sure you want to delete this image")) return;

    try {
        const response = await fetch("/api/images/delete", {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: new URLSearchParams({ path: imagePath })
        });

        const result = await response.json();

        if (result.Success) {
            // Rimuove solo l'immagine eliminata dall'array e aggiorna la vista
            allImages = allImages.filter(img => img.Path !== imagePath);
            filteredImages = filteredImages.filter(img => img.Path !== imagePath);
            loadMoreImages(true);
        } else {
            alert("Errore nella cancellazione dell'immagine.");
        }
    } catch (error) {
        console.error("Errore:", error);
        alert("Errore nel server, riprova più tardi.");
    }
}

document.getElementById("uploadForm").addEventListener("submit", async function (event) {
    event.preventDefault();

    let fileInput = document.getElementById("imageUpload");
    let file = fileInput.files[0];

    if (!file) {
        alert("Seleziona un'immagine prima di caricare.");
        return;
    }

    if (file.size > 2 * 1024 * 1024) { // 2MB
        alert("L'immagine non può essere più grande di 2MB.");
        return;
    }

    let formData = new FormData();
    formData.append("image", file);

    try {
        let response = await fetch("/api/images/create", {
            method: "POST",
            body: formData
        });

        let result = await response.json();

        if (result.Success) {
            let newImage = { Name: result.Name, Path: result.Path };
            allImages.unshift(newImage);
            filteredImages = allImages;
            loadMoreImages(true);
            fileInput.value = "";
        } else {
            alert("Errore nel caricamento dell'immagine.");
        }
    } catch (error) {
        console.error("Errore:", error);
        alert("Errore nel server, riprova più tardi.");
    }
});


// Carica le prime 50 immagini al caricamento della pagina
document.addEventListener("DOMContentLoaded", () => loadMoreImages(true));
</script>
